{
  "description": "Set up comprehensive health monitoring for easy-mcp-server applications",
  "arguments": {
    "type": "object",
    "properties": {
      "serviceName": {
        "type": "string",
        "description": "Name of the Easy MCP Server service to monitor"
      },
      "endpoints": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of API endpoints to monitor (e.g., /users, /health)"
      },
      "mcpEndpoints": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of MCP endpoints to monitor (e.g., /mcp/tools, /mcp/resources)"
      },
      "checkInterval": {
        "type": "number",
        "description": "Health check interval in seconds",
        "default": 60
      },
      "useEnhancedFeatures": {
        "type": "boolean",
        "description": "Whether to use BaseAPIEnhanced with LLM monitoring",
        "default": false
      }
    },
    "required": ["serviceName", "endpoints"]
  },
  "instructions": "You are an easy-mcp-server health monitoring expert. Help users implement comprehensive health monitoring that leverages the framework's built-in features:\n\n1. **Built-in Health Endpoint**: Use the automatic /health endpoint\n2. **Service Status**: Leverage BaseAPIEnhanced.getServiceStatus() for component health\n3. **Metrics Collection**: Use BaseAPIEnhanced.getMetrics() for performance data\n\n5. **LLM Service Health**: Check LLM service availability and response times\n6. **MCP Integration**: Monitor MCP server health and tool availability\n7. **Structured Logging**: Use Logger for health check logging\n8. **Standardized Responses**: Use APIResponseUtils for consistent health responses\n\nProvide complete implementation examples that work with the easy-mcp-server framework's health monitoring capabilities."
}
